(function register(app){app.events.on('app:init',function init(){function UpdateRecord(def){this.def=def;}
UpdateRecord.prototype.run=function(opts,currentExecution){const fieldDef=this.def;const properties=fieldDef.properties;const fieldsToBeUpdated=properties.fieldsToBeUpdated;if(!this.hasEditAccess(opts.recordModel,fieldsToBeUpdated)){app.alert.show('alert_no_access',{level:'error',title:app.lang.get('ERR_NO_VIEW_ACCESS_TITLE'),messages:app.lang.get('ERR_NO_VIEW_ACCESS_ACTION'),autoClose:true,autoCloseDelay:5000});currentExecution.nextAction();return;};let computedFields={};let hardCodedFields={};_.each(fieldsToBeUpdated,function update(fieldMeta,fieldKey){const isCalculated=fieldMeta.isCalculated;if(isCalculated){computedFields[fieldKey]=fieldMeta;}else{hardCodedFields[fieldKey]=fieldMeta;}});const totalComputedFields=Object.keys(computedFields).length;const totalHardCodedFields=Object.keys(hardCodedFields).length;if(totalHardCodedFields===0&&totalComputedFields===0){currentExecution.nextAction();}else if(totalComputedFields===0){this.updateRecord(fieldsToBeUpdated,opts,currentExecution);}else{this.resolveComputedValues(fieldsToBeUpdated,computedFields,opts,currentExecution);}};UpdateRecord.prototype.hasEditAccess=function(model,fieldsToBeUpdated){let hasAccess=app.acl.hasAccessToModel('edit',model)&&_.chain(fieldsToBeUpdated).values().map(function getFieldName(field){return field.fieldName;}).reduce(function verifyFieldAccess(hasAccess,fieldName){return hasAccess&&app.acl.hasAccessToModel('edit',model,fieldName);},true).value();return hasAccess;};UpdateRecord.prototype.resolveComputedValues=function(allFieldsMeta,computedFieldsMeta,opts,currentExecution){let recordModel=opts.recordModel;const requestType='create';const apiPath='actionButton/evaluateExpression';let requestMeta={targetFields:computedFieldsMeta,targetRecordId:recordModel.id,targetModule:recordModel.module};const apiCallbacks={success:_.bind(function fieldsCalculatedCallback(result){_.each(result,function assignNewValues(item,key){const value={};value[key]=item;allFieldsMeta[key].value=value;});this.updateRecord(allFieldsMeta,opts,currentExecution);},this)};const apiUrl=app.api.buildURL(apiPath,requestType,requestMeta,{});app.api.call(requestType,apiUrl,requestMeta,null,apiCallbacks);};UpdateRecord.prototype.fetchAndApplyChanges=function(model,updatedFields,currentExecution){let changes=model.changedAttributes();changes=_.omit(changes,_.keys(updatedFields));changes=_.omit(changes,['date_modified']);model.fetch({complete:function reapplyChanges(){model.set(changes);currentExecution.nextAction();}});};UpdateRecord.prototype.normalizeFullameValue=function(fieldDef,fieldData){if(_.isString(fieldData.value[fieldData.fieldName])&&_.isUndefined(fieldData.value.first_name)&&_.isUndefined(fieldData.value.last_name)){let nameParts=fieldData.value[fieldData.fieldName].split(' ');let lastName=nameParts.pop().trim();let firstName=nameParts.join(' ').trim();return{first_name:firstName,last_name:lastName};}else{return fieldData.value;}};UpdateRecord.prototype.normalizeDatetimeValue=function(fieldDef,fieldData){if(_.isString(fieldData.value[fieldData.fieldName])){let value={};value[fieldData.fieldName]=app.date.utc(fieldData.value[fieldData.fieldName]).format();return value;}else{return fieldData.value;}};UpdateRecord.prototype.normalizeRelateValue=function(fieldDef,fieldData){let idName=fieldDef.id_name;if(!_.isEmpty(fieldData.value[idName])){return fieldData.value;}else{let value={};value[fieldData.fieldName]=fieldData.value[fieldData.fieldName];value[idName]=fieldData.value[fieldData.fieldName];return value;}};UpdateRecord.prototype.normalizeParentValue=function(fieldDef,fieldData){let typeName=fieldDef.type_name;let idName=fieldDef.id_name;let value={};if(_.isObject(fieldData.value.parent)){value[fieldData.fieldName]=fieldData.value.parent.name;value[typeName]=fieldData.value.parent._module;value[idName]=fieldData.value.parent.id;}else if(!_.isEmpty(fieldData.value[typeName])&&!_.isEmpty(fieldData.value[idName])){value[fieldData.fieldName]=fieldData.value[fieldData.fieldName];value[typeName]=fieldData.value[typeName];value[idName]=fieldData.value[idName];}else{let parentParts=fieldData.value[fieldData.fieldName].split('|');let recordModule=(parentParts.shift()||'').trim();let recordId=(parentParts.shift()||'').trim();let recordName=(parentParts.join('')||'').trim();value[fieldData.fieldName]=recordName;value[typeName]=recordModule;value[idName]=recordId;}
return value;};UpdateRecord.prototype.normalizeTagValue=function(fieldDef,fieldData){if(_.isString(fieldData.value[fieldData.fieldName])){let value={};value[fieldData.fieldName]=fieldData.value[fieldData.fieldName].split(',');return value;}else{return fieldData.value;}};UpdateRecord.prototype.normalizeFieldValue=function(fieldData,model){let result=[];let fieldDef=model.fields[fieldData.fieldName];switch(fieldDef.type){case'fullname':result.push(this.normalizeFullameValue(fieldDef,fieldData));break;case'datetime':case'datetimecombo':result.push(this.normalizeDatetimeValue(fieldDef,fieldData));break;case'relate':result.push(this.normalizeRelateValue(fieldDef,fieldData));break;case'parent':result.push(this.normalizeParentValue(fieldDef,fieldData));break;case'tag':result.push(this.normalizeTagValue(fieldDef,fieldData));break;default:result.push(fieldData.value);break;}
return result;};UpdateRecord.prototype.updateRecord=function(fieldValues,opts,currentExecution){let recordModel=opts.recordModel;fieldValues=_.chain(fieldValues).values().map(a=>this.normalizeFieldValue(a,recordModel)).flatten(1).map(a=>_.pairs(a)).flatten(1).object().value();if(this.def.properties.autoSave){let patchValues=_.assign({},fieldValues,{id:recordModel.get('id')});let patchModel=app.data.createBean(recordModel.module,patchValues);patchModel.save({},{showAlerts:true,success:_.bind(function successSave(){this.fetchAndApplyChanges(recordModel,fieldValues,currentExecution);},this),error:_.bind(function errorSave(){this.fetchAndApplyChanges(recordModel,fieldValues,currentExecution);},this)});}else{recordModel.set(fieldValues);if(opts.recordView&&opts.recordView.name==='dashablerecord'){opts.recordView.editRecord();}else if(opts.recordView&&opts.recordView.name==='preview'){let previewHeader=opts.recordView.layout.getComponent('preview-header');if(previewHeader){previewHeader.triggerEdit();}}else if(opts.recordView&&(opts.recordView.type==='subpanel-list'||opts.recordView.type==='recordlist')){opts.recordView.editClicked(opts.recordModel,opts.buttonField);}else if(opts.recordView&&opts.recordView.name==='dashlet-toolbar'){opts.recordView.layout.getComponent('dashablerecord').editRecord();}else{app.controller.context.trigger('button:edit_button:click');}
currentExecution.nextAction();}};app.actions=app.actions||{};app.actions=_.extend(app.actions,{UpdateRecord:UpdateRecord});});})(SUGAR.App);