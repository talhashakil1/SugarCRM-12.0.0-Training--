(function register(app){app.events.on('app:init',function init(){function CreateRecord(def){this.def=def;this.deniedFields=['id','_acl','_hash','_module','user_sync','created_by','modified_by_name','modified_user_id','modified_user_link','created_by_link','created_by_name','date_entered','date_modified','locked_fields','_erased_fields','acl_team_names','acl_team_set_id','created_by_link','sync_key','team_count_link'];}
CreateRecord.prototype.run=function(opts,currentExecution){if(this.hasEditAccess(this.def.properties.module)){this._createRecord(opts,currentExecution);}else{this.noAccessAlert(currentExecution);}};CreateRecord.prototype._createRecord=function(opts,currentExecution){const parentRecordModel=opts.recordModel;const parentRecordView=opts.recordView;const actionProperties=this.def.properties;const module=actionProperties.module;const shouldLink=actionProperties.mustLinkRecord;const relLink=actionProperties.link;var bean=null;if(shouldLink){bean=opts.createLinkModelFct(parentRecordModel,relLink);}else{bean=app.data.createBean(module);}
if(actionProperties.copyFromParent){bean=this._populateModelFromParent(bean,parentRecordModel);}
bean=this._populateModelWithParentAttributes(bean,parentRecordModel,actionProperties.parentAttributes);this._resolveModelWithCustomAttributes(bean,parentRecordView,actionProperties,opts,currentExecution);};CreateRecord.prototype._hasAsyncLogic=function(attributes){const calculatedFields=_.filter(attributes,function checkCalculatedFields(item){return item.isCalculated;});return calculatedFields.length>0;};CreateRecord.prototype._resolveModelWithCustomAttributes=function(newBean,parentRecordView,actionProperties,opts,currentExecution){const targetFields=actionProperties.attributes;if(this._hasAsyncLogic(targetFields)){this._populateAsyncModelWithCustomAttributes(newBean,parentRecordView,actionProperties,opts,currentExecution);}else{this._populateSyncModelWithCustomAttributes(newBean,parentRecordView,actionProperties,targetFields,opts,currentExecution);}};CreateRecord.prototype._populateSyncModelWithCustomAttributes=function(newBean,parentRecordView,actionProperties,targetFields,opts,currentExecution){const module=actionProperties.module;newBean=this._populateModelWithCustomAttributes(newBean,targetFields);if(actionProperties.autoCreate){this._trySetTeam(newBean);var validationErrors={};newBean.on('error:validation',function handleValidationError(errors){validationErrors=errors;});newBean.doValidate(newBean.fields,_.bind(function modelValidated(isValid){if(isValid){newBean.save({},{showAlerts:false,success:_.bind(function successSave(model,changed){app.alert.show('create-success',{level:'success',messages:this._displayMessage(model,module),autoClose:true,autoCloseDelay:10000,onLinkClick:function(){app.alert.dismiss('create-success');}});this._refreshCollection(parentRecordView,actionProperties);currentExecution.nextAction();},this)});}else{var fields=_.chain(validationErrors).keys().map(function getFieldLabel(f){return'<li>'+app.lang.get(newBean.fields[f].vname,newBean.module)+'</li>';}).value();var msg=_.union([app.lang.get('LBL_ACTIONBUTTON_INVALID_FIELD_VALUES')],fields);app.alert.show('invalid-data',{level:'error',messages:msg});currentExecution.nextAction();}},this));}else{if(module==='Quotes'){this._navigateCreateQuote(newBean,module,parentRecordView);}else{this._openCreateDrawer(newBean,module,parentRecordView,actionProperties);}
currentExecution.nextAction();}};CreateRecord.prototype._trySetTeam=function(bean){if(_.isEmpty(bean.get('team_name'))){var teams=app.utils.deepCopy(app.user.getPreference('default_teams'));bean.set('team_name',teams);bean.set('team_count',teams.length);}
if(!_.isEmpty(bean.get('team_name'))&&_.isEmpty(bean.get('team_count'))){let teams=bean.get('team_name');bean.set('team_count',teams.length);}};CreateRecord.prototype._navigateCreateQuote=function(bean,module,parentRecordView){var loadViewObj={module:'Quotes',layout:'create',action:'edit',convert:false,create:true,model:bean,collection:app.data.createBeanCollection('Quotes')};app.controller.loadView(loadViewObj);app.router.navigate('#Quotes/create',{trigger:false});};CreateRecord.prototype._openCreateDrawer=function(newBean,module,parentView,actionProperties){app.drawer.open({layout:'create',context:{create:true,model:newBean,module:module,parentView:parentView}},_.bind(function drawerClose(context,model){if(!model){return;}
if(parentView.type==='dashlet-toolbar'){parentView.refreshClicked();}else{let context=parentView.context;context.set('skipFetch',false);context.reloadData();this._refreshCollection(parentView,actionProperties);}},this));};CreateRecord.prototype._populateAsyncModelWithCustomAttributes=function(newBean,parentRecordView,actionProperties,opts,currentExecution){let targetFields=actionProperties.attributes;const recordModule=parentRecordView.model.module;const recordId=parentRecordView.model.id;const requestType='create';const apiPath='actionButton/evaluateExpression';const calculatedFields=_.pick(targetFields,function pickCalculated(item){return item.isCalculated;});const simpleFields=_.pick(targetFields,function pickCalculated(item){return!item.isCalculated;});newBean=this._populateModelWithCustomAttributes(newBean,simpleFields);const beanFieldsData=newBean.attributes;let requestMeta={targetFields:calculatedFields,targetRecordId:recordId,targetModule:recordModule,beanData:beanFieldsData,};const apiCallbacks={success:_.bind(function calculatedFormula(result){_.each(result,function addNewValues(item,key){if(typeof(targetFields[key])==='string'){targetFields={};}
const value={};value[key]=item;targetFields[key]={fieldName:key,isCalculated:false,formula:'',value:value};},this);this._populateSyncModelWithCustomAttributes(newBean,parentRecordView,actionProperties,targetFields,opts,currentExecution);},this)};const apiUrl=app.api.buildURL(apiPath,requestType,requestMeta,{});app.api.call(requestType,apiUrl,requestMeta,null,apiCallbacks);};CreateRecord.prototype._populateModelWithCustomAttributes=function(newBean,targetFields){let fieldValues=_.chain(targetFields).values().map(a=>this.normalizeFieldValue(a,newBean)).flatten(1).map(a=>_.pairs(a)).flatten(1).object().value();newBean.set(fieldValues);return newBean;};CreateRecord.prototype._cloneParentFieldValue=function(fieldInfo,record,parent){const recordField=fieldInfo.fieldName;const parentField=fieldInfo.parentFieldName;const recordFieldDef=record.fields[recordField];const parentFieldDef=parent.fields[parentField];let value={};if(this.deniedFields.indexOf(recordField)!==-1){return value;};if(recordFieldDef.type==='relate'&&parentFieldDef.type==='relate'&&!_.isEmpty(recordFieldDef.id_name)&&!_.isEmpty(parentFieldDef.id_name)){value[recordField]=parent.get(parentField);value[recordFieldDef.id_name]=parent.get(parentFieldDef.id_name);}else{value[recordField]=parent.get(parentField);};return value;};CreateRecord.prototype._populateModelWithParentAttributes=function(newBean,parentRecordModel,targetFields){let fieldValues=_.chain(targetFields).values().map(a=>this._cloneParentFieldValue(a,newBean,parentRecordModel)).flatten(1).map(a=>_.pairs(a)).flatten(1).object().value();newBean.set(fieldValues);return newBean;};CreateRecord.prototype._populateModelFromParent=function(newBean,parentRecordModel){let fieldValues=_.chain(newBean.fields).filter(function filterCloneableFields(f){return(this.deniedFields.indexOf(f.name)===-1&&!_.isEmpty(parentRecordModel.fields[f.name])&&f.type===parentRecordModel.fields[f.name].type&&!_.isUndefined(parentRecordModel.get(f.name)));},this).map(function createCloneTuple(f){return[f.name,parentRecordModel.get(f.name)];}).object().value();newBean.set(fieldValues);return newBean;};CreateRecord.prototype._refreshCollection=function(parentRecordView,actionProperties){if(actionProperties.mustLinkRecord){var collection=parentRecordView.model.getRelatedCollection(actionProperties.link);collection.fetch({relate:true});}};CreateRecord.prototype._displayMessage=function(model,module){var modelAttributes;var successLabel='LBL_RECORD_SAVED_SUCCESS';var successMessageContext;if(model&&model.attributes){modelAttributes=model.attributes;if(model.get('no_success_label_link')){successLabel='LBL_RECORD_SAVED_SUCCESS_NO_LINK';}}else{modelAttributes={};successLabel='LBL_RECORD_SAVED';}
successMessageContext=_.extend({module:module,moduleSingularLower:app.lang.getModuleName(module).toLowerCase()},modelAttributes);return app.lang.get(successLabel,module,successMessageContext);};CreateRecord.prototype.hasEditAccess=function(module){const access=app.acl.hasAccess('edit',module);return access;};CreateRecord.prototype.noAccessAlert=function(currentExecution){app.alert.show('alert_no_access',{level:'error',title:app.lang.get('ERR_NO_VIEW_ACCESS_TITLE'),messages:app.lang.get('ERR_NO_VIEW_ACCESS_ACTION'),autoClose:true,autoCloseDelay:5000});currentExecution.nextAction();};CreateRecord.prototype.normalizeFullameValue=function(fieldDef,fieldData){if(_.isString(fieldData.value[fieldData.fieldName])&&_.isUndefined(fieldData.value.first_name)&&_.isUndefined(fieldData.value.last_name)){let nameParts=fieldData.value[fieldData.fieldName].split(' ');let lastName=nameParts.pop().trim();let firstName=nameParts.join(' ').trim();return{first_name:firstName,last_name:lastName};}else{return fieldData.value;}};CreateRecord.prototype.normalizeDatetimeValue=function(fieldDef,fieldData){if(_.isString(fieldData.value[fieldData.fieldName])){let value={};value[fieldData.fieldName]=app.date.utc(fieldData.value[fieldData.fieldName]).format();return value;}else{return fieldData.value;}};CreateRecord.prototype.normalizeRelateValue=function(fieldDef,fieldData){let idName=fieldDef.id_name;if(!_.isEmpty(fieldData.value[idName])){return fieldData.value;}else{let value={};value[fieldData.fieldName]=fieldData.value[fieldData.fieldName];value[idName]=fieldData.value[fieldData.fieldName];return value;}};CreateRecord.prototype.normalizeParentValue=function(fieldDef,fieldData){let typeName=fieldDef.type_name;let idName=fieldDef.id_name;let value={};if(_.isObject(fieldData.value.parent)){value[fieldData.fieldName]=fieldData.value.parent.name;value[typeName]=fieldData.value.parent._module;value[idName]=fieldData.value.parent.id;}else if(!_.isEmpty(fieldData.value[typeName])&&!_.isEmpty(fieldData.value[idName])){value[fieldData.fieldName]=fieldData.value[fieldData.fieldName];value[typeName]=fieldData.value[typeName];value[idName]=fieldData.value[idName];}else{let parentParts=fieldData.value[fieldData.fieldName].split('|');let recordModule=(parentParts.shift()||'').trim();let recordId=(parentParts.shift()||'').trim();let recordName=(parentParts.join('')||'').trim();value[fieldData.fieldName]=recordName;value[typeName]=recordModule;value[idName]=recordId;}
return value;};CreateRecord.prototype.normalizeTagValue=function(fieldDef,fieldData){if(_.isString(fieldData.value[fieldData.fieldName])){let value={};value[fieldData.fieldName]=fieldData.value[fieldData.fieldName].split(',');return value;}else{return fieldData.value;}};CreateRecord.prototype.normalizeFieldValue=function(fieldData,model){let result=[];let fieldDef=model.fields[fieldData.fieldName];switch(fieldDef.type){case'fullname':result.push(this.normalizeFullameValue(fieldDef,fieldData));break;case'datetime':case'datetimecombo':result.push(this.normalizeDatetimeValue(fieldDef,fieldData));break;case'relate':result.push(this.normalizeRelateValue(fieldDef,fieldData));break;case'parent':result.push(this.normalizeParentValue(fieldDef,fieldData));break;case'tag':result.push(this.normalizeTagValue(fieldDef,fieldData));break;default:result.push(fieldData.value);break;}
return result;};app.actions=app.actions||{};app.actions=_.extend(app.actions,{CreateRecord:CreateRecord});});})(SUGAR.App);