(function(app){app.events.on('app:init',function(){app.plugins.register('Cascade',['field'],{baseFieldName:null,baseFieldType:null,fieldNames:null,field:null,model:null,attachAction:null,readOnlyProp:null,createActions:['create','create-nodupecheck'],editableActions:['edit','create','create-nodupecheck'],onAttach:function(field,plugin){let oppConfig=app.metadata.getModule('Opportunities','config');if(!oppConfig||oppConfig.opps_view_by!=='RevenueLineItems'){field.displayCheckbox=false;return;}
this._initPluginProperties(field);this._initModelProperties();this._initViewProperties();this._initFieldProperties();this._initDefaultValues();this._initListeners();this.view.cascadeFields[this.baseFieldName].initialized=true;},_initPluginProperties:function(field){this.field=field;this.view=this.field.options.view;this.model=this.field.options.model;this.baseFieldName=this.field.options.def.name;this.baseFieldType=this.field.options.def.type;this.attachAction=this.field.action;this.hasCascadeError=false;if(this.baseFieldType==='fieldset-cascade'){this.fieldNames=_.map(this.field.options.def.fields,function(field){return field.name;});}else{this.fieldNames=[this.field.baseFieldName];}},_initModelProperties:function(){if(this.createActions.includes(this.field.options.view.action)){this.cascadeValidationTask=`cascade_${this.field.name}_${this.field.cid}`;this.model.addValidationTask(this.cascadeValidationTask,_.bind(this._validateCascadeOnCreate,this));}},_initViewProperties:function(){this.view.cascadeFields=this.view.cascadeFields||{};this.view.cascadeFields[this.baseFieldName]=this.view.cascadeFields[this.baseFieldName]||{initialized:false};},_initFieldProperties:function(){if(this._isOnLeadConvert()&&!this._isOnLeadConvertWithProperty('enableRlis')){this.field.displayCheckbox=false;this.field.action='disabled';return;}
this.field.displayCheckbox=true;this.field.lblString=this.getCheckboxLabel();this.field.setMode=_.wrap(this.field.setMode,_.bind(function(setMode,args){setMode.call(this.field,args);this.handleModeChange(args);},this));this.field._render=_.wrap(this.field._render,_.bind(function(_render,args){this._beforeRender();_render.call(this.field,args);this._afterRender();},this));},_initDefaultValues:function(){if(!this.view.cascadeFields[this.baseFieldName].initialized&&this.createActions.includes(this.field.options.view.action)){this.view.cascadeFields[this.baseFieldName].defaultValues={};let valuesToSet={};this.fieldNames.forEach(fieldName=>{let defaultValue=this.model.get(fieldName);this.view.cascadeFields[this.baseFieldName].defaultValues[fieldName]=defaultValue;valuesToSet[fieldName]='';});this.model.set(valuesToSet,{hideDbvWarning:true});}},_initListeners:function(){_.each(this.fieldNames,function(fieldName){this.listenTo(this.model,'change:'+fieldName,this.setCascadeValue,this);},this);this.listenTo(this.model,'sync',this.clearCascadeValue,this);let hasDisableConditions=this.options&&this.options.def&&this.options.def.disable_field;if(hasDisableConditions&&!this.createActions.includes(this.options.view.name)){let disableFieldName=this.options.def.disable_field;if(_.isArray(disableFieldName)){_.each(disableFieldName,function(fieldName){this.listenTo(this.model,'change:'+fieldName,this.handleReadOnly,this);},this);}else{this.listenTo(this.model,'change:'+disableFieldName,this.handleReadOnly,this);}}
this.listenTo(this.field,'editable:toggle-field',this._handleEditableFieldToggled,this);this.listenTo(this.view,'record:edit:cancel',this._handleEditableFieldToggled,this);this.listenTo(this.view,'editable:toggle_fields',this._handleEditableFieldsToggled,this);},_handleEditableFieldToggled:function(viewAction){if(!this.editableActions.includes(viewAction)){this.model.unset(`${this.baseFieldName}_cascade_checked`);this.clearCascadeValue();}},_handleEditableFieldsToggled:function(fieldsToggled,viewAction){if(!this.editableActions.includes(viewAction)){_.each(fieldsToggled,function(field){if(field.name===this.baseFieldName){this._handleEditableFieldToggled(viewAction);}},this);}},_beforeRender:function(){let checkboxChecked=this.model.get(this.baseFieldName+'_cascade_checked')||false;let fieldHasErrors=!_.isEmpty(this.field._errors)||this.hasCascadeError;if((this.readOnlyProp||!checkboxChecked)&&!fieldHasErrors){let oldAction=this.field._previousAction||this.field.action;this.field._removeViewClass(oldAction);this.field._previousAction=oldAction;this.field.action='disabled';this.field.shouldCascade=false;this.field.cascadeCheckboxDisabled=this.readOnlyProp;}else{this.field.shouldCascade=checkboxChecked;this.field.cascadeCheckboxDisabled=false;if(_.isUndefined(this.field.action)){this.field.action=this.field.options.view.action;}}
let isCreate=this.createActions.includes(this.field.options.view.action);let isLeadConvertWithOptionalRlis=this._isOnLeadConvert()&&!this._isOnLeadConvertWithProperty('requireRlis');if(isCreate&&this.field.displayCheckbox&&(this._hasNoRliCollection()&&!isLeadConvertWithOptionalRlis)){this.field.displayCheckbox=false;}},_afterRender:function(){this.bindEditActions();if(this.view.el.classList.contains('flex-list-view')){this.view.el.classList.add('double-height-row');}},handleModeChange:function(toTemplate){if(!this.field.$el){return;}
var action=toTemplate||this.field.action||this.field.view.action||'detail';if(this.editableActions.includes(action)){this.handleReadOnly();}else{this.field.setDisabled(false,{trigger:true});}},bindEditActions:function(){if(this.editableActions.includes(this.attachAction)){this.attachAction=null;this.field.render();}
var checkbox=this.field.$el.find('input[type=checkbox]');var self=this;checkbox.click(function(){if(this.checked===false){self.model.unset(self.field.name+'_cascade_checked');self.field.setDisabled(true,{trigger:true});self.resetModelValue();self.model.trigger('cascade:checked:'+self.field.name,false);}else{self.model.set(self.field.name+'_cascade_checked',true);self.field.setDisabled(false,{trigger:true});self.setDefaultValue();self.setCascadeValue();self.model.trigger('cascade:checked:'+self.field.name,true);}});},handleReadOnly:function(){let hasDisableConditions=this.options&&this.options.def&&this.options.def.disable_field;if(this.model&&hasDisableConditions&&!this.createActions.includes(this.options.view.name)){let disableFieldName=this.options.def.disable_field;let calculatedValue=null;if(_.isArray(disableFieldName)){let fieldValue1=this.model.get(disableFieldName[0]);let fieldValue2=this.model.get(disableFieldName[1]);calculatedValue=(!_.isUndefined(fieldValue1)&&!_.isUndefined(fieldValue2))?(fieldValue1-fieldValue2):null;}else if(typeof disableFieldName==='string'){var disableFieldValue=this.model.get(disableFieldName);calculatedValue=!_.isUndefined(disableFieldValue)?disableFieldValue:null;}
if(calculatedValue!==null){if(!_.isUndefined(this.field.def)&&_.isUndefined(this.field.def.readOnlyProp)){this.field.def.readOnlyProp=false;}
let setReadOnly=calculatedValue<=0;if(this.options.def.disable_positive){setReadOnly=calculatedValue>0;}
this.readOnlyProp=setReadOnly||this.field.def.readOnlyProp;}}
this.render();},resetModelValue:function(){_.each(this.fieldNames,function(fieldName){this.model.set(fieldName,this.model.getSynced(fieldName)||'');this.model.unset(`${fieldName}_cascade`);this.setRliValueForField(fieldName,'');},this);},setDefaultValue:function(){let defaultValues=this.view.cascadeFields[this.baseFieldName].defaultValues;if(!this.createActions.includes(this.options.view.name)||_.isEmpty(defaultValues)){return;}
let valuesToSet={};this.fieldNames.forEach(fieldName=>{if(!_.isUndefined(defaultValues[fieldName])){valuesToSet[fieldName]=defaultValues[fieldName];}else{valuesToSet[fieldName]='';}});this.model.set(valuesToSet);},setCascadeValue:function(){if(!this.editableActions.includes(this.action)){return;}
_.each(this.fieldNames,function(fieldName){let fieldValue=this.model.get(fieldName);this.model.set(fieldName+'_cascade',fieldValue);this.setRliValueForField(fieldName,fieldValue);},this);},_getRliCollection:function(){let rliContext=this.context.getChildContext({link:'revenuelineitems'});rliContext.prepare();return rliContext.get('collection');},setRliValueForField:function(fieldName,fieldValue){if(!this.createActions.includes(this.options.view.name)){return;}
let rliCollection=this._getRliCollection();if(_.isEmpty(rliCollection.models)){return;}
rliCollection.models.forEach(model=>{if(app.utils.isRliFieldValidForCascade(model,fieldName)){model.set(fieldName,fieldValue);}});},clearCascadeValue:function(){if(this.context.attributes.layout&&this.context.attributes.layout==='record'){_.each(this.fieldNames,function(fieldName){this.model.unset(`${fieldName}_cascade`);this.setRliValueForField(fieldName,'');},this);}},getCheckboxLabel:function(){let labelKey=this.createActions.includes(this.field.options.view.action)?'LBL_CASCADE_RLI_CREATE':'LBL_CASCADE_RLI_EDIT';return app.lang.get(labelKey,'Opportunities');},_isOnLeadConvert:function(){return this.field.options&&this.field.options.context&&this.field.options.context.parent&&this.field.options.context.parent.get('convertModuleList');},_isOnLeadConvertWithProperty:function(property){if(!this._isOnLeadConvert()){return false;}
let convertModuleList=this.field.options.context.parent.get('convertModuleList');return convertModuleList.find(moduleMeta=>moduleMeta.id==='Opportunities')[property];},_hasNoRliCollection:function(){let rliCollection=this._getRliCollection();return _.isEmpty(rliCollection)||rliCollection.length===0;},_validateCascadeOnCreate:function(fields,errors,callback){this.hasCascadeError=false;let isChecked=this.model.get(`${this.name}_cascade_checked`);let rliCollection=this._getRliCollection();let fieldValues=this.fieldNames.map(field=>this.model.get(field));let isEmpty=fieldValues.some(value=>!value);if(isChecked&&!_.isEmpty(rliCollection)&&isEmpty){this.fieldNames.forEach(field=>{if(this.model.get(field)){return;}
if(rliCollection.models.some(model=>app.utils.isRliFieldValidForCascade(model,field))){errors[field]=errors[field]||{};errors[field].required=true;this.hasCascadeError=true;}});}
callback(null,fields,errors);},onDetach:function(){this.stopListening(null,null,this.setCascadeValue);this.stopListening(null,null,this.clearCascadeValue);this.stopListening(null,null,this.handleReadOnly);this.stopListening(null,null,this._handleEditableFieldToggled);this.stopListening(null,null,this._handleEditableFieldsToggled);this.model.removeValidationTask(this.cascadeValidationTask);}});});})(SUGAR.App);