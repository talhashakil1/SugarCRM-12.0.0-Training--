{{!--
/*
 * Your installation or use of this SugarCRM file is subject to the applicable
 * terms available at
 * http://support.sugarcrm.com/Resources/Master_Subscription_Agreements/.
 * If you do not agree to all of the applicable terms or do not have the
 * authority to bind the entity as an authorized representative, then do not
 * install or use this SugarCRM file.
 *
 * Copyright (C) SugarCRM Inc. All rights reserved.
 */
--}}
<style>
  .example-chart {
    height: 280px;
    width: 100%;
    position: relative;
  }
</style>

<section id="colors">
  <div class="page-header">
    <p class="lead">{{{meta.description}}}</p>
  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>Standard Chart Colors</h3>
      <p>Using standard D3 chart colors is the default.</p>
      <div id="pie1" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var chart = sucrose.charts.pieChart()
        .colorData('default');

  d3.select("#pie svg")
    .datum(data_default)
    .call(chart);
</pre>
    </div>

    <div class="span6">
      <h3>Standard Chart Colors with Gradient Fill</h3>
      <p>It is possible to fill the chart shapes with a gradient using the active color palette.</p>
      <div id="pie2" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var chart = sucrose.charts.pieChart()
        .colorData('default', {gradient: true} );

  d3.select("#pie svg")
    .datum(data_default)
    .call(chart);
</pre>
    </div>

  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>Data-Defined Colors</h3>
      <p>If colors are defined in the data, they are used instead of D3 colors.</p>
      <div id="pie3" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var chart = sucrose.charts.pieChart()
        .colorData('data');

  d3.select("#pie svg")
    .datum(data_defined)
    .call(chart);
</pre>
    </div>

    <div class="span6">
      <h3>Data-Defined Chart with Gradient Fill</h3>
      <p>It is possible to fill the chart shapes with a gradient using a graduated color palette.</p>
      <div id="pie4" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var chart = sucrose.charts.pieChart()
        .colorData('data', {gradient: true});

  d3.select("#pie svg")
    .datum(data_defined)
    .call(chart);
</pre>
    </div>

  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>Graduated Palette Colors</h3>
      <p>It is also possible to use a graduated palette (any data option except classes).</p>
      <div id="pie5" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var color_options = {c1: '#e8e2ca', c2: '#3e6c0a', l: data_default.data.length};
  var chart = sucrose.charts.pieChart()
        .colorData('graduated', color_options);

  d3.select("#pie svg")
    .datum(data_default)
    .call(chart);
</pre>
    </div>

    <div class="span6">
      <h3>Graduated Palette Colors with Gradient Fill</h3>
      <p>It is possible to fill the chart shapes with a gradient using a graduated color palette.</p>
      <div id="pie6" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var color_options = {c1: '#e8e2ca', c2: '#3e6c0a', l: data_default.data.length, gradient: true};
  var chart = sucrose.charts.pieChart()
        .colorData('graduated', color_options);

  d3.select("#pie svg")
    .datum(data_default)
    .call(chart);
</pre>
    </div>

  </div>

  <div class="row-fluid">

    <div class="span6">
      <h3>CSS Class Colors</h3>
      <p>Chart colors can be defined using classes (the default classes in themes). If classes are not defined in data, they are assigned sequentially.</p>
      <div id="pie7" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var chart = sucrose.charts.pieChart()
        .colorData('class');

  d3.select("#pie svg")
    .datum(data_default)
    .call(chart);
</pre>
    </div>

    <div class="span6">
      <h3>Data-Defined Classes</h3>
      <p>It is possible to specify which chart class to use for use for a data series in the chart data.</p>
      <div id="pie8" class="example-chart">
        <svg class="sucrose sc-chart"></svg>
      </div>
<pre class="prettyprint linenums">
  var chart = sucrose.charts.pieChart()
        .colorData('data');

  d3.select("#pie svg")
    .datum(data_classes)
    .call(chart);
</pre>
    </div>

  </div>
</section>


<section id="colors">
  <div class="page-header">
    <h2>Example Chart Data Options <small>Options for setting chart color styles.</small></h2>
    <p>Color classes and RGB hex values can be embedded in the chart data. Depending on the colorData setting, they may or may not be used.</p>
  </div>
  <div class="row-fluid">

    <div class="span4">
      <h3>Option 1: Default Chart Data</h3>
      <p>A basic data definition for charts will use the standard D3 colors.</p>
<pre class="prettyprint linenums">
    var data_default = {
      'properties': {
        'title': 'Sales by Section'
      },
      'data': [
        {key: "Section 1", y: 3},
        {key: "Section 2", y: 5},
        {key: "Section 3", y: 7},
        {key: "Section 4", y: 9}
      ]
    };
</pre>
    </div>

    <div class="span4">
      <h3>Option 2: Data-Defined Colors</h3>
      <p>If colors are defined in the data, they are used instead of D3 colors.</p>
<pre class="prettyprint linenums">
    var data_defined = {
      'properties': {
        'title': 'Sales by Section'
      },
      'data': [
        {key: "Section 1", y: 3, color: "#d62728"},
        {key: "Section 2", y: 5, color: "#ff7f0e"},
        {key: "Section 3", y: 7, color: "#bcbd22"},
        {key: "Section 4", y: 9, color: "#2ca02c"}
      ]
    };
</pre>
    </div>

    <div class="span4">
      <h3>Option 3: Data-Defined Classes</h3>
      <p>If classes are defined in the data, they are used to set the style properties.</p>
<pre class="prettyprint linenums">
    var data_classes = {
      'properties': {
        'title': 'Sales by Section'
      },
      'data': [
        {key: "Section 1", value: 3, classes: "sc-fill09"},
        {key: "Section 2", value: 5, classes: "sc-fill03"},
        {key: "Section 3", value: 7, classes: "sc-fill12"},
        {key: "Section 4", value: 9, classes: "sc-fill05"}
      ]
    };
</pre>
    </div>

  </div>

</section>


<section id="colors">
  <div class="page-header">
    <h2>SugarCRM Accent Color Classes for Charts</h2>
    <p>A description of the standard D3 categorical color scales is in <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales" target="_blank" rel="nofollow noopener noreferrer">D3 documentation</a>. New color scales can be generated using Cynthia Brewer's <a href="http://colorbrewer2.org/" target="_blank">ColorBrewer</a>.</p>
  </div>
  <div class="row-fluid">
    <div class="span12">
      <h3>Fill and Stroke</h3>
      <p>A progressive rainbow of colors.</p>
      <div>
<table class="table table-bordered table-striped">
          <tr>
            <td><code>@mint => @sc-fill00, @sc-stroke00</code></td>
            <td><code>.sc-fill00, .sc-stroke00</code></td>
            <td class="hex mono">#0d8046</td>
            <td class="swatch-col"><span class="swatch mint"></span></td>
          </tr>
          <tr>
            <td><code>@green => @sc-fill01, @sc-stroke01</code></td>
            <td><code>.sc-fill01, .sc-stroke01</code></td>
            <td class="hex mono">#33800d</td>
            <td><span class="swatch green"></span></td>
          </tr>
          <tr>
            <td><code>@army => @sc-fill02, @sc-stroke02</code></td>
            <td><code>.sc-fill02, .sc-stroke02</code></td>
            <td class="hex mono">#6a800d</td>
            <td><span class="swatch army"></span></td>
          </tr>
          <tr>
            <td><code>@yellow => @sc-fill03, @sc-stroke03</code></td>
            <td><code>.sc-fill03, .sc-stroke03</code></td>
            <td class="hex mono">#e5a117</td>
            <td><span class="swatch yellow"></span></td>
          </tr>
          <tr>
            <td><code>@orange => @sc-fill04, @sc-stroke04</code></td>
            <td><code>.sc-fill04, .sc-stroke04</code></td>
            <td class="hex mono">#cc3314</td>
            <td><span class="swatch orange"></span></td>
          </tr>
          <tr>
            <td><code>@red => @sc-fill05, @sc-stroke05</code></td>
            <td><code>.sc-fill05, .sc-stroke05</code></td>
            <td class="hex mono">#e61718</td>
            <td><span class="swatch red"></span></td>
          </tr>
          <tr>
            <td><code>@pink => @sc-fill06, @sc-stroke06</code></td>
            <td><code>.sc-fill06, .sc-stroke06</code></td>
            <td class="hex mono">#e5176d</td>
            <td><span class="swatch pink"></span></td>
          </tr>
          <tr>
            <td><code>@purple => @sc-fill07, @sc-stroke07</code></td>
            <td><code>.sc-fill07, .sc-stroke07</code></td>
            <td class="hex mono">#6d17e5</td>
            <td><span class="swatch purple"></span></td>
          </tr>
          <tr>
            <td><code>@night => @sc-fill08, @sc-stroke08</code></td>
            <td><code>.sc-fill08, .sc-stroke08</code></td>
            <td class="hex mono">#1f12b3</td>
            <td><span class="swatch night"></span></td>
          </tr>
          <tr>
            <td><code>@blue => @sc-fill09, @sc-stroke09</code></td>
            <td><code>.sc-fill09, .sc-stroke09</code></td>
            <td class="hex mono">#176de5</td>
            <td><span class="swatch blue"></span></td>
          </tr>
          <tr>
            <td><code>@ocean => @sc-fill10, @sc-stroke10</code></td>
            <td><code>.sc-fill10, .sc-stroke10</code></td>
            <td class="hex mono">#1378bf</td>
            <td><span class="swatch ocean"></span></td>
          </tr>
          <tr>
            <td><code>@pacific => @sc-fill11, @sc-stroke11</code></td>
            <td><code>.sc-fill11, .sc-stroke11</code></td>
            <td class="hex mono">#0f7799</td>
            <td><span class="swatch pacific"></span></td>
          </tr>
          <tr>
            <td><code>@teal => @sc-fill12, @sc-stroke12</code></td>
            <td><code>.sc-fill12, .sc-stroke12</code></td>
            <td class="hex mono">#0d806c</td>
            <td><span class="swatch teal"></span></td>
          </tr>
          <tr>
            <td><code>@coral => @sc-fill13, @sc-stroke13</code></td>
            <td><code>.sc-fill13, .sc-stroke13</code></td>
            <td class="hex mono">#ff6fcf</td>
            <td><span class="swatch coral"></span></td>
          </tr>
</table>
      </div>
    </div>

    {{!-- <div class="span6">
      <h3>Creating New Chart Color Themes</h3>

      <div class="alert alert-info">
        <p>New chart color themes are created in the <code>/styleguide/themes/clients/base</code> directory. Copy the <code>/default</code> folder and rename. Inside this folder, edit the variables.less file. In the CHART section, edit the @fillXX and @strokeXX LESS variables as needed. Then go to the Bootstrap Builder at <a href="../build/">/styleguide/build/</a>, choose your new theme folder and click the "Compile" button. Your new chart color theme will be available.</p>
        <p>Your new chart color theme will be visible in the charts on this page. To enable the use of chart color CSS classes, set the <code>.colorData( 'class' )</code> property in your chart definition (see example above). Custom SVG gradient fills in CSS are not supported.</p>
      </div>
    </div> --}}
  </div>
</section>
