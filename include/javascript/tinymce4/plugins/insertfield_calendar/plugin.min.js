/*
 * Your installation or use of this SugarCRM file is subject to the applicable
 * terms available at
 * http://support.sugarcrm.com/Resources/Master_Subscription_Agreements/.
 * If you do not agree to all of the applicable terms or do not have the
 * authority to bind the entity as an authorized representative, then do not
 * install or use this SugarCRM file.
 *
 * Copyright (C) SugarCRM Inc. All rights reserved.
 */
(function loadInsertFieldCalendarPlugin(app) {
    /**
     * Fields which should not be available to insert in the template
     */
    var badFields = [
        'deleted',
        'team_count',
        'user_name',
        'user_hash',
        'password',
        'is_admin',
        'mkto_id',
        'parent_type'
    ];

    var specialFields = [
        'created_by_name',
        'modified_by_name',
        'primary_contact_name',
        'duration_minutes',
        'duration_hours',
        'entry_source',
        'email1'
    ];
    /**
     * Field types which should not be available to insert in the template
     */
    var badFieldTypes = [
        'link',
        'id',
        'collection',
        'widget',
        'html',
        'htmleditable_tinymce',
        'image',
        'teamset',
        'team_list',
        'password',
        'file'
    ];

    var insertFieldCalendarPlugin = function(editor) {
        var module = editor.settings.sugarField.model.get('calendar_module');
        var fields = app.metadata.getModule(module).fields;
        fields = _.filter(fields, function(field) {
            return _.contains(specialFields, field.name) || (
                !_.isEmpty(field.name) &&
                !_.isEmpty(field.vname) &&
                !_.contains(badFields, field.name) &&
                !_.contains(badFieldTypes, field.type) &&
                !_.contains(badFieldTypes, field.dbType) &&
                field.link_type !== 'relationship_info' &&
                (
                    _.isUndefined(field.studio) ||
                    (_.isObject(field.studio) || field.studio == 'true' || field.studio == true)
                ) &&
                field.source !== 'non-db' &&
                typeof field.processes == 'undefined'
            );
        });

        fields.push({
            name: 'event_timestamp',
            vname: app.lang.getModString('LBL_INSERTFIELD_EVENT_TIMESTAMP', 'Calendar')
        });

        var insertOptions = [];

        fields = _.sortBy(fields, function sortFieldsAlphabetically(field) {
            var fieldLabel = app.lang.get(field.vname, module);

            if (_.isString(fieldLabel)) {
                return fieldLabel.toLowerCase();
            } else {
                return '';
            }
        });

        _.each(
            fields,
            function(field) {
                var fieldLabel = app.lang.get(field.vname, module);

                var option = {
                    text: fieldLabel,
                    value: fieldLabel,
                    onclick: function() {
                        editor.execCommand('mceInsertContent', false , '{::' + field.name + '::}');
                        //fix for tinyMCE to persist the insert
                        editor.settings.sugarField.$('.mce-panel:first').focus();
                        editor.getWin().focus();
                    }
                };

                insertOptions.push(option);
            }, this
        );

        return {
            type: 'menubutton',
            text: app.lang.getModString('LBL_INSERTFIELD', 'Calendar'),
            icon: false,
            menu: insertOptions
        };
    };

    window.tinymce.PluginManager.add('insertfield_calendar', function(editor, url) {
        if (!app.acl.hasAccess('view', editor.settings.sugarField.model.get('calendar_module'))) {
            return;
        }
        if (_.isEmpty(editor.settings.sugarField.model.get('calendar_module'))) {
            return;
        }
        editor.addButton('insertfield_calendar', insertFieldCalendarPlugin(editor));
    });

})(SUGAR.App);
